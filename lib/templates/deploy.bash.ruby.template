# Rails Helpers
# -----------

setLatestRubyVersion(){
    # Hardcoded to 2.3.3 for now until we support more versions
	LATEST_RUBY_VERSION=2.3.3
	echo "Using ruby version $LATEST_RUBY_VERSION"
}

initializeDeploymentConfig() {
	if [ -z $BUNDLE_WITHOUT ]; then 
		echo "Bundle install with no 'without' options"; 
		OPTIONS="";
	else 
		OPTIONS="--without $BUNDLE_WITHOUT";
		echo "Bundle install with options $OPTIONS";
	fi
	
	if [ -z $BUNDLE_INSTALL_LOCATION ]; then 
		echo "Defaulting gem installation directory to /tmp/bundle"; 
		BUNDLE_INSTALL_LOCATION="/tmp/bundle";
	else 
		echo "Gem installation directory is $BUNDLE_INSTALL_LOCATION";
	fi
	
	if [ -z $SITE_CONFIG_DIR ]; then 
		echo "Defaulting site config directory to /home/site/config"; 
		SITE_CONFIG_DIR="/home/site/config"
	else 
		echo "site config directory is $SITE_CONFIG_DIR";
	fi
	
	setLatestRubyVersion
}



##################################################################################################################################
# Deployment
# ----------

echo Ruby on Rails deployment.

# 1. KuduSync
if [[ "$IN_PLACE_DEPLOYMENT" -ne "1" ]]; then
  "$KUDU_SYNC_CMD" -v 50 -f "$DEPLOYMENT_SOURCE{SitePath}" -t "$DEPLOYMENT_TARGET" -n "$NEXT_MANIFEST_PATH" -p "$PREVIOUS_MANIFEST_PATH" -i ".git;.hg;.deployment;deploy.sh"
  exitWithMessageOnError "Kudu Sync failed"
fi

initializeDeploymentConfig

echo "$DEPLOYMENT_TARGET"
if [ -e "$DEPLOYMENT_TARGET/Gemfile" ]; then
  echo "Found gemfile"
  pushd "$DEPLOYMENT_TARGET"
  
  eval "$(rbenv init -)"
  exitWithMessageOnError "init failed"
  
  echo "Setting ruby version"
  rbenv global $LATEST_RUBY_VERSION
  exitWithMessageOnError "Failed to switch ruby versions"
  
  echo "Running bundle clean"
  bundle clean --force
  
  echo "Running bundle install"
  mkdir -p /tmp/bundle
  bundle config --global path $BUNDLE_INSTALL_LOCATION
  bundle install --no-deployment $OPTIONS
  exitWithMessageOnError "bundler failed"
  
  echo "Zipping up bundle contents"
  tar -zcf /tmp/gems.tgz -C $BUNDLE_INSTALL_LOCATION .
  exitWithMessageOnError "Error compressing gems"
  
  mkdir -p $SITE_CONFIG_DIR
  exitWithMessageOnError "Error making config directory"
  
  cp -f /tmp/gems.tgz $SITE_CONFIG_DIR
  
  if [ "$ASSETS_PRECOMPILE" == true ]; then 
	echo "running rake assets:precompile"
    bundle exec rake --trace assets:precompile
  fi
  exitWithMessageOnError "precompilation failed"
  popd
fi

##################################################################################################################################

